fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('asd')
fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('tab_01')
fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active')
fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script') %>% html_text()
install.packages("V8")
library(V8)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script') %>% html_text()
fom_js <- v8()
View(fom_js)
read_html(fom_js$eval(gsub('document.write','',fom_data))) %>% html_text()
fom_js <- v8()
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script') %>% html_text()
fom_js <- v8()
read_html(fom_js$eval(gsub('document.write','',fom_data)))
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script') %>% html_text()
fom_data
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
View(fom_data)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script') %>% html_text()
read_html(fom_js$eval(gsub('hc-line-groups','',fom_data)))
fom_js$eval("var HCparams = { \"categoies\": [\"4 августа 2019\", \"11 августа 2019\", \"18 августа 2019\", \"25 августа 2019\", \"1 сентября 2019\", \"8 сентября 2019\", \"15 сентября 2019\", \"22 сентября 2019\", \"29 сентября 2019\", \"6 октября 2019\", \"13 октября 2019\", \"20 октября 2019\", \"27 октября 2019\", \"3 ноября 2019\", \"10 ноября 2019\", \"17 ноября 2019\", \"24 ноября 2019\", \"1 декабря 2019\",\"8 декабря 2019\",\"15 декабря 2019\", \"22 декабря 2019\", \"12 января 2020\", \"19 января 2020\", \"26 января 2020\", \"2 февраля 2020\", \"9 февраля 2020\", \"16 февраля 2020\", \"23 февраля 2020\", \"1 марта 2020\", \"8 марта 2020\", \"15 марта 2020\", \"22 марта 2020\"], \"values\": [[12, 12, 11, 11, 13, 13, 11, 11, 12, 13, 12, 12, 12, 11, 12, 12, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 10, 11, 9, 9, 14], [27, 28, 29, 27, 26, 26, 26, 28, 27, 26, 26, 25, 25, 26, 25, 25, 27, 27, 28, 26, 26, 27, 27, 25, 24, 24, 24, 25, 25, 24, 26, 26], [60, 60, 60, 61, 61, 61, 62, 61, 60, 62, 62, 62, 62, 63, 63, 62, 62, 62, 61, 61, 62, 60, 62, 64, 65, 64, 65, 64, 64, 66, 65, 60]], \"series\": [\"Затрудняюсь ответить\", \"Плохо\", \"Хорошо\"], \"colors\": [\"corp3/0\", \"red/1\", \"corp3/4\"] }")
fom_js$eval("HCparams")
link <- 'https://food.list.co.uk/place/22191-brewhemia-edinburgh/'
#Read the html page content and extract all javascript codes that are inside a list
emailjs <- read_html(link) %>% html_nodes('li') %>% html_nodes('script') %>% html_text()
# Create a new v8 context
ct <- v8()
emailjs
read_html(ct$eval(gsub('document.write','',emailjs))) %>%
html_text()
read_html(fom_js$eval(gsub('HCparams','',fom_data))) %>% html_text()
read_html(fom_js$eval(gsub('HCparams.values','',fom_data))) %>% html_text()
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script') %>% html_attrs()
View(fom_data)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script') %>% html_text()
fom_data
read_html(fom_js$eval(gsub('HCparams.catogies','',fom_data))) %>% html_text()
read_html(fom_js$eval(fom_data))
fom_js$call("HCParams.categoies")
fom_js$get(fom_data)
read_html(fom_js$eval(gsub("HC.params.value","",fom_data))) %>% html_text()
fom_js$eval(fom_data)
fom_js$eval(var HCparams = { "categoies": ["4 августа 2019", "11 августа 2019", "18 августа 2019", "25 августа 2019", "1 сентября 2019", "8 сентября 2019", "15 сентября 2019", "22 сентября 2019", "29 сентября 2019", "6 октября 2019", "13 октября 2019", "20 октября 2019", "27 октября 2019", "3 ноября 2019", "10 ноября 2019", "17 ноября 2019", "24 ноября 2019", "1 декабря 2019","8 декабря 2019","15 декабря 2019", "22 декабря 2019", "12 января 2020", "19 января 2020", "26 января 2020", "2 февраля 2020", "9 февраля 2020", "16 февраля 2020", "23 февраля 2020", "1 марта 2020", "8 марта 2020", "15 марта 2020", "22 марта 2020"], "values": [[12, 12, 11, 11, 13, 13, 11, 11, 12, 13, 12, 12, 12, 11, 12, 12, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 10, 11, 9, 9, 14], [27, 28, 29, 27, 26, 26, 26, 28, 27, 26, 26, 25, 25, 26, 25, 25, 27, 27, 28, 26, 26, 27, 27, 25, 24, 24, 24, 25, 25, 24, 26, 26], [60, 60, 60, 61, 61, 61, 62, 61, 60, 62, 62, 62, 62, 63, 63, 62, 62, 62, 61, 61, 62, 60, 62, 64, 65, 64, 65, 64, 64, 66, 65, 60]], "series": ["Затрудняюсь ответить", "Плохо", "Хорошо"], "colors": ["corp3/0", "red/1", "corp3/4"] };)
install.packages("PhantomJS")
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script') %>% as_list()
View(fom_data)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
View(fom_data)
View(fom_data)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()[4]
html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()[[4]]
fom_data2 <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
fom_js$eval(fom_data2[[4]])
View(fom_js)
View(fom_js)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
fom_data2 <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
fom_js$eval(fom_data2[[4]])
View(fom_js)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
fom_data2 <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
jsonlite::fromJSON(fom_js$get("HCParams"))
fom_data2 <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr() %>% keep(stringi::stri_detect_regex("^\tvar"))
html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr() %>% keep(stringi::stri_detect_regex, "^\tvar") %>% fom_js$eval()
jsonlite::fromJSON(fom_js$get("HCParams"))
jsonlite::fromJSON(fom_js$get("HCparams"))
html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr() %>% keep(stringi::stri_detect_regex, "^\var") %>% fom_js$eval()
jsonlite::fromJSON(fom_js$get("HCparams"))
html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
View(fom_data)
read_html(fom_js$eval(gsub("HC.params.value","",fom_data))) %>% html_text()
html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
test <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
test[4]
str_extract_all(test[4], ru_months)
library(tidyverse)
library(devtools)
fom_url <- "https://fom.ru/Politika/10946"
fom_pg  <- read_html(fom_url)
fom_tab <- html_table(fom_pg)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
test <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
test[4]
## File:        biznesslanch-putin_opinion-get_data.R
## Version:     3
## Description: Pulls most recent data on Putin's approval rating from Levada, FOM and VTsIOM.
## Set up -----------------
Sys.setlocale("LC_CTYPE", "Russian")
Sys.setlocale("LC_TIME", "Russian")
library(tidyverse)
library(stringr)
library(rvest)
library(lubri
library(lubridate)
library(V8)
library(lubridate)
library(V8)
fom_url <- "https://fom.ru/Politika/10946"
fom_pg  <- read_html(fom_url)
fom_tab <- html_table(fom_pg)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
test <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
test[4]
str_extract_all(test[4], ru_m)
test[4]
test
fom_js <- v8()
read_html(fom_js$eval(fom_data))
fom_js$get(fom_data)
View(fom_data)
library(jsonlite)
fromJSON(test[4])
fom_js$eval(test)
fom_js$eval(test[4])
fom_js$get(test[4])
test_4 <- fom_js$eval(test[4])
test
test_4 <- fom_js$eval(data)
test_4 <- fom_js$eval(fom_data)
test_4 <- fom_js$eval(fom_data)
test <- html_text(fom_data) %>% stringi::stri_split_lines()
View(test)
test_4 <- fom_js$eval(test)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('highcharts-axis')
View(fom_data)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.highcharts-axis')
test <- html_text(fom_data)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('g-8')
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>%
html_nodes('.highchart-container')
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
test <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
test <- test[4]
fom_js <- v8()
test
k <- str_extract_all(test, "\\([^[]]+\\)")[[1]]
ru_months <- c("января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря")
ru_abbrev <- c("Янв","Фев","Март","Апр","Май","Июнь","Июль","Авг","Сент","Окт","Ноя","Дек")
k <- str_extract_all(test, ru_months)
View(k)
## File:        biznesslanch-putin_opinion-get_data.R
## Version:     3
## Description: Pulls most recent data on Putin's approval rating from Levada, FOM and VTsIOM.
## Set up -----------------
Sys.setlocale("LC_CTYPE", "Russian")
Sys.setlocale("LC_TIME", "Russian")
library(tidyverse)
library(stringr)
library(rvest)
library(lubridate)
library(V8)
library(jsonlite)
## set defaults
ru_months <- c("января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря")
ru_abbrev <- c("Янв","Фев","Март","Апр","Май","Июнь","Июль","Авг","Сент","Окт","Ноя","Дек")
fom_url <- "https://fom.ru/Politika/10946"
fom_pg  <- read_html(fom_url)
fom_tab <- html_table(fom_pg)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
test <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
test <- test[4]
test[['categoies']]
test
fom_js <- v8()
fom_js$eval(test)
fom_js
fom_js$eval(test, serialize = TRUE)
banorte <- "https://www.banorte.com/wps/portal/ixe/Home/indicadores/tipo-de-cambio/" %>%
read_html() %>%
html_nodes('#indicadores_financieros_wrapper > script:nth-child(2)') %>%
as_list()
View(banorte)
banorte[[1]][[1]]
fom_js$eval(test["HCParams.categoies"]
fom_js$eval(test["HCParams.categoies"])
fom_js <- v8()
fom_js$eval(test["HCParams.categoies"])
fom_js$assign("test", test)
fom_js$console()
fom_js <- v8()
fom_js$assign("test", test)
fom_js$console()
test <- test
test
fom_url <- "https://fom.ru/Politika/10946"
fom_pg  <- read_html(fom_url)
fom_tab <- html_table(fom_pg)
fom_data <- fom_pg %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('.tab.tab-v3.tab-active') %>% html_nodes('script')
test <- html_text(fom_data) %>% stringi::stri_split_lines() %>% flatten_chr()
test <- test
test
fom_js <- v8()
fom_js$assign("test", test)
fom_js$console()
# Program:      biznesslanch-IRA-troll_tweets-processing.r
# Author:       Tom Wonder
# First Date:   11/24/2019
# Last Date:    7/28/2020
# Project:      IRA Troll tweets
# Task:         Process tweet data
### Set up ---------------
rm(list = ls())
library(tidyverse)
library(tidytext)
library(quanteda)
library(lubridate)
library(extrafont)
library(ggthemes)
library(syuzhet)
library(magrittr)
library(flextable)
datadir     <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Data/Cleaned data"
tabdir      <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Tables"
plotdir     <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Plots"
scriptdir   <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Scripts"
tsize <- 22 # title size
bsize <- 12 # base family size
axxmar <- margin(10,0,0,0)
axymar <- margin(0,5,0,0)
## load dataset ----------------
setwd(datadir)
load("biznesslanch-aggregated_tweets-en_ru")
# # Get sentiments of each tweet
tweet_english <- tweet_data_user_date %>% filter(tweet_language=="en")
tweet_english <- rownames_to_column(tweet_english) %>% rename(id = rowname) %>% mutate(text_id = as.integer(id))
tweet_english <- tweet_english %>% mutate(tot_interactions = num_tweets*mean_interactions)
eng_corpus <- corpus(tweet_english, text_field = "comb_text")
eng_tokens <- tokens(eng_corpus, remove_punct=TRUE, remove_url=TRUE, remove_numbers=TRUE)
eng_ngrams <- tokens_ngrams(eng_tokens, n=2)
stopword <- c(stopword, "rt", "https")
stop_words
stop_words %>% count(lexicon)
stopword <- stop_words %>% select(-lexicon) %>% pull()
stopword <- c(stopword, "rt", "https")
eng_tokens <- tokens_select(eng_tokens, pattern = stopword, selection = "remove")
eng_ngrams <- tokens_ngrams(eng_tokens, n=2)
docmat_eng2 <- dfm(eng_ngrams)
Sys.setenv("plotly_username"="tewonder")
Sys.setenv("plotly_api_key"="CCsRCekkcS68eBzCx3Of")
gitdatadir <- "C:/Users/bizne/OneDrive/Blog/Public opinion tracker/Published/Data"
Sys.setlocale("LC_CTYPE", "russian")
# Load packages ----------------
library(plotly)
library(broom)
library(devtools)
library(lubridate)
library(tidyverse)
# load Data ---------------
# Note: need to read in API key first (in separate script)
source_url("https://raw.githubusercontent.com/biznesslanch/Russian-Public-Opinion-Tracker/master/Scripts/biznesslanch-putin_opinion-get_data-v3.R",
encoding = "UTF-8")
View(levada_check)
View(fom_check)
View(vtsiom_check)
View(levada_data)
View(fom_check)
m <- loess(Approve ~ date_num, span=0.1, data= combined_data)
l <- loess(Disapprove ~ date_num, span=0.1, data= combined_data)
tdy_date_dt <- Sys.Date()
tdy_date <- format(tdy_date_dt, "%m/%d/%Y")
update <- "Last updated:"
update_cap <- paste(update, tdy_date, sep=" ")
axy <- list(title="Approval/Disapproval", hoverformat=".1f")
axx <-  list(title="", type="date",
tickmode="array",
tickvalue = combined_data$Date,
spikemode="across", spikecolor="black", spikethickness=1, spikedash="solid", spikesnap="cursor",
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 mo",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 mo",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "YTD",
step = "year",
stepmode = "todate"),
list(
count = 2,
label = "2 yrs",
step = "year",
stepmode = "backward"),
list(step = "all"))),
rangeslider=list(type="date", visible=TRUE, thickness=0.0))
# plot -------------------------------------------------------------
opinion_plot <- combined_data %>% na.omit() %>% plot_ly(., x= ~date_num, height = "600", width = "1100") %>%
add_markers(y= ~Approve, showlegend=FALSE, color =I("royalblue3"), alpha=0.2,
hoverinfo = "none") %>%
add_markers(y= ~Disapprove, showlegend=FALSE, color =I("red2"), alpha=0.2,
hoverinfo = "none") %>%
add_lines(y= ~fitted(loess(Approve ~ date_num, span=0.1)), showlegend=TRUE,
line= list(color="rgb(58,95,205"),
name="Approval",
hoverinfo="text",
text= ~paste("Date:", format(Date, "%m-%d-%Y"),
"<br>Approval:", round(m$fitted,1))) %>%
add_lines(y= ~fitted(loess(Disapprove ~ date_num, span=0.1)), showlegend=FALSE,
line= list(color="red2"),
name="Disapproval",
hoverinfo="text",
text= ~paste("Date:", format(Date, "%m-%d-%Y"),
"<br>Disapproval:", round(l$fitted,1))) %>%
add_ribbons(data = augment(m),
ymin = ~.fitted - 1.96 * .se.fit,
ymax = ~.fitted + 1.96 * .se.fit,
color= I("royalblue3"), alpha=0.4, showlegend=FALSE, hoverinfo="none",
line=list(color="rgba(46,91,187,0.0)")) %>%
add_ribbons(data = augment(l),
ymin = ~.fitted - 1.96 * .se.fit,
ymax = ~.fitted + 1.96 * .se.fit,
color= I("red2"), alpha=0.4, showlegend=FALSE, hoverinfo="none",
line=list(color="rgba(220,14,14,0.0)")) %>%
add_annotations(xref="paper",yref="paper", xanchor="left",
x=0.65,y=1.075,
text="Putin Approval Rating<br><sup>From May 2012</sup><br>",
showarrow=F, align="left",
font=list(size=26,family="Arial")) %>%
add_annotations(xref="paper",yref="paper", xanchor="left",
x=0.65,y=0.97,
text=update_cap,
showarrow=F, align="left",
font=list(size=12,family="Arial")) %>%
layout(xaxis=axx, autosize=F,
yaxis=axy,
font=list(family="arial"),
hovermode="compare",
hoverlabel=list(font=list(size=16)),
spikedistance=-1,
hoverdistance=-1,
annotations = list(
list(xref = "paper", yref="paper", xanchor="middle", yanchor="middle",
x=0.325, y=1.025, showarrow=F, align="middle",
text = "Key",
font = list(size=12, family="Arial", color="#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 1, showarrow = F, align = "left",
text = "<b>Lower bound</b>",
font = list(size = 10, family = "Arial", color = "#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 1.04, showarrow = F, align = "left",
text = "<b>Higher bound</b>",
font = list(size = 10, family = "Arial", color = "#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.485, y = 1.02, showarrow = F, align = "left",
text = "<b>Estimate</b>",
font = list(size = 10, family = "Arial", color = "#404040"))),
shapes= list(
list(type = "rectangle",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1, y1 = 1.04,
fillcolor = "#d9d9d9",
line = list(width = 0)),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1, y1 = 1,
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1.04, y1 = 1.04,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1.02, y1 = 1.02,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#404040")))) %>%
config(displayModeBar=F)
opinion_plot
# note, this last line will not run w/o the API key
api_create(opinion_plot, filename = "biznesslanch-ru_opinion-tracker-v1.1")
# remove No answer and hard to say from Levada and FOM data
levada_data <- levada_data %>% select(-No.Answer)
fom_data    <- fom_data %>% select(-hard_to_say)
combined_data <- rbind(levada_data, vtsiom_data, fom_data)
combined_data <- combined_data %>% filter(Date >= "2012-05-07")
combined_data <- combined_data %>% mutate(Date = as.POSIXct(Date + 1, tz="GMT+3", origin="1970-01-01")) #add 1 day to Date to get correct dates
combined_data$date_num <- as.numeric(combined_data$Date)*1000
View(combined_data)
# create shortcuts for plotly plot -------------------------
m <- loess(Approve ~ date_num, span=0.1, data= combined_data)
l <- loess(Disapprove ~ date_num, span=0.1, data= combined_data)
tdy_date_dt <- Sys.Date()
tdy_date <- format(tdy_date_dt, "%m/%d/%Y")
update <- "Last updated:"
update_cap <- paste(update, tdy_date, sep=" ")
axy <- list(title="Approval/Disapproval", hoverformat=".1f")
axx <-  list(title="", type="date",
tickmode="array",
tickvalue = combined_data$Date,
spikemode="across", spikecolor="black", spikethickness=1, spikedash="solid", spikesnap="cursor",
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 mo",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 mo",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "YTD",
step = "year",
stepmode = "todate"),
list(
count = 2,
label = "2 yrs",
step = "year",
stepmode = "backward"),
list(step = "all"))),
rangeslider=list(type="date", visible=TRUE, thickness=0.0))
# plot -------------------------------------------------------------
opinion_plot <- combined_data %>% na.omit() %>% plot_ly(., x= ~date_num, height = "600", width = "1100") %>%
add_markers(y= ~Approve, showlegend=FALSE, color =I("royalblue3"), alpha=0.2,
hoverinfo = "none") %>%
add_markers(y= ~Disapprove, showlegend=FALSE, color =I("red2"), alpha=0.2,
hoverinfo = "none") %>%
add_lines(y= ~fitted(loess(Approve ~ date_num, span=0.1)), showlegend=TRUE,
line= list(color="rgb(58,95,205"),
name="Approval",
hoverinfo="text",
text= ~paste("Date:", format(Date, "%m-%d-%Y"),
"<br>Approval:", round(m$fitted,1))) %>%
add_lines(y= ~fitted(loess(Disapprove ~ date_num, span=0.1)), showlegend=FALSE,
line= list(color="red2"),
name="Disapproval",
hoverinfo="text",
text= ~paste("Date:", format(Date, "%m-%d-%Y"),
"<br>Disapproval:", round(l$fitted,1))) %>%
add_ribbons(data = augment(m),
ymin = ~.fitted - 1.96 * .se.fit,
ymax = ~.fitted + 1.96 * .se.fit,
color= I("royalblue3"), alpha=0.4, showlegend=FALSE, hoverinfo="none",
line=list(color="rgba(46,91,187,0.0)")) %>%
add_ribbons(data = augment(l),
ymin = ~.fitted - 1.96 * .se.fit,
ymax = ~.fitted + 1.96 * .se.fit,
color= I("red2"), alpha=0.4, showlegend=FALSE, hoverinfo="none",
line=list(color="rgba(220,14,14,0.0)")) %>%
add_annotations(xref="paper",yref="paper", xanchor="left",
x=0.65,y=1.075,
text="Putin Approval Rating<br><sup>From May 2012</sup><br>",
showarrow=F, align="left",
font=list(size=26,family="Arial")) %>%
add_annotations(xref="paper",yref="paper", xanchor="left",
x=0.65,y=0.97,
text=update_cap,
showarrow=F, align="left",
font=list(size=12,family="Arial")) %>%
layout(xaxis=axx, autosize=F,
yaxis=axy,
font=list(family="arial"),
hovermode="compare",
hoverlabel=list(font=list(size=16)),
spikedistance=-1,
hoverdistance=-1,
annotations = list(
list(xref = "paper", yref="paper", xanchor="middle", yanchor="middle",
x=0.325, y=1.025, showarrow=F, align="middle",
text = "Key",
font = list(size=12, family="Arial", color="#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 1, showarrow = F, align = "left",
text = "<b>Lower bound</b>",
font = list(size = 10, family = "Arial", color = "#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 1.04, showarrow = F, align = "left",
text = "<b>Higher bound</b>",
font = list(size = 10, family = "Arial", color = "#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.485, y = 1.02, showarrow = F, align = "left",
text = "<b>Estimate</b>",
font = list(size = 10, family = "Arial", color = "#404040"))),
shapes= list(
list(type = "rectangle",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1, y1 = 1.04,
fillcolor = "#d9d9d9",
line = list(width = 0)),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1, y1 = 1,
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1.04, y1 = 1.04,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1.02, y1 = 1.02,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#404040")))) %>%
config(displayModeBar=F)
opinion_plot
# note, this last line will not run w/o the API key
api_create(opinion_plot, filename = "biznesslanch-ru_opinion-tracker-v1.1")

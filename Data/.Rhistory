## load dataset ----------------
setwd(datadir)
load("biznesslanch-troll_tweets-english-sample")
# Program:      biznesslanch-IRA-troll_tweets-processing.r
# Author:       Tom Wonder
# First Date:   11/24/2019
# Last Date:    2/25/2020
# Project:      IRA Troll tweets
# Task:         Process tweet data
### Set up ---------------
rm(list = ls())
library(tidyverse)
library(tidytext)
library(quanteda)
library(lubridate)
library(extrafont)
library(ggthemes)
library(sentimentr)
library(magrittr)
library(flextable)
datadir     <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Data/Cleaned data"
tabdir      <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Tables"
plotdir     <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Plots"
scriptdir   <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Scripts"
tsize <- 22 # title size
bsize <- 12 # base family size
axxmar <- margin(10,0,0,0)
axymar <- margin(0,5,0,0)
## load dataset ----------------
setwd(datadir)
load("biznesslanch-troll_tweets-english-sample")
# Get sentiments of each tweet
tweet_englishsamp <- tweet_englishsamp %>% mutate(tweet_id = row_number())
tweet_sents <- tweet_englishsamp %>% mutate(tweets = get_sentences(tweet_text)) %$%
sentiment_by(tweets)
tweet_sents <- as.data.frame(tweet_sents)
tweet_sents <- tweet_sents %>% select(tweet_id = element_id, ave_sentiment)
tweet_englishsamp  <- left_join(x=tweet_englishsamp, y=tweet_sents)
tweet_englishsamp <- tweet_englishsamp %>% rename(tweet_sentiment = ave_sentiment)
tweet_englishsamp %>% arrange(desc(date)) %>% select(date)
# create quanteda corpus - English ------------
eng_corpus <- corpus(tweet_englishsamp, text_field = "tweet_text")
docvars(eng_corpus, "date")
docvars(eng_corpus, "follower_count")
docvars(eng_corpus, "user_id")
docvars(eng_corpus, "tot_interaction")
docvars(eng_corpus, "tweet_sentiment")
# create document feature matrix English ------------
stopword <- stop_words %>% filter(lexicon!="onix") %>% select(-lexicon) %>% pull()
stopword <- c(stopword, "rt", "https")
docmat_eng <- dfm(eng_corpus, remove_url=T, remove_numbers=T, remove_punct=T,
remove = c(stopword))
# create stm object ---------------------
tweet_outeng <- convert(docmat_eng, to="stm", docvars = docvars(eng_corpus))
setwd(datadir)
save(tweet_outeng, file="biznesslanch-troll-tweets-stm-v2")
# create objecct for topicmodels
tweet_tmeng <- convert(docmat_eng, to="tm")
save(tweet_tmeng, file="biznesslanch-troll-tweets-tm-v1")
install.packages("tm")
install.packages("topicmodels")
tweet_tmeng <- convert(docmat_eng, to="topicmodels")
save(tweet_tmeng, file="biznesslanch-troll-tweets-tm-v1")
datadir     <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Data/Cleaned data"
tabdir      <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Tables"
plotdir     <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Plots"
scriptdir   <- "C:/Users/bizne/OneDrive/Blog/Data Projects/Russian Troll Tweets/Scripts"
set.seed(19527)
tweet_10top <- LDA(tweet_tmeng, k=10, method = "Gibbs")
library(topicmodels)
tweet_10top <- LDA(tweet_tmeng, k=10, method = "Gibbs")
tweet_10topics<- tidytext::tidy(tweet_10top, matrix="beta")
View(tweet_10topics)
View(tweet_10topics)
tweet_10topics %>% group_by(topic) %>%
top_n(15, beta)
tweet_10_topwords <- tweet_10topics %>% group_by(topic) %>%
top_n(15, beta)
View(tweet_10_topwords)
View(tweet_10top)
tweet_10_topwords <- tweet_10topics %>% group_by(topic) %>%
top_n(15, beta) %>% ungroup() %>%
arrange(topic, -beta)
View(tweet_10_topwords)
tweet_10_topwords <- tweet_10topics %>% group_by(topic) %>%
top_n(10, beta) %>% ungroup() %>%
arrange(topic, -beta)
tweet_10_topwords %>% mutate(term= reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill=factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
tweet_10_topwords <- tweet_10topics %>% group_by(topic) %>%
top_n(10, beta) %>% ungroup() %>%
arrange(topic, -beta)
tweet_10_topwords %>% mutate(term= reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill=factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
tweet_12top <- LDA(tweet_tmeng, k=12, method = "Gibbs")
tweet_12_topwords <- tweet_12topics %>% group_by(topic) %>%
top_n(10, beta) %>% ungroup() %>%
arrange(topic, -beta)
tweet_12_topwords %>% mutate(term= reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill=factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
tweet_12_topwords <- tweet_12topics %>% group_by(topic) %>%
top_n(10, beta) %>% ungroup() %>%
arrange(topic, -beta)
tweet_12_topwords <- tweet_12top %>% group_by(topic) %>%
top_n(10, beta) %>% ungroup() %>%
arrange(topic, -beta)
tweet_12topics<- tidytext::tidy(tweet_12top, matrix="beta")
tweet_12_topwords <- tweet_12topics %>% group_by(topic) %>%
top_n(10, beta) %>% ungroup() %>%
arrange(topic, -beta)
tweet_12_topwords %>% mutate(term= reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill=factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
tweet_15top <- LDA(tweet_tmeng, k=15, method = "Gibbs")
tweet_15topics<- tidytext::tidy(tweet_15top, matrix="beta")
tweet_15_topwords <- tweet_15topics %>% group_by(topic) %>%
top_n(10, beta) %>% ungroup() %>%
arrange(topic, -beta)
tweet_15_topwords %>% mutate(term= reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill=factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
tm12 <- posterior(tweet_12top)
View(tm12)
theta12 <- tm12$topics
View(theta12)
View(theta12)
tweet_12docs <- tidytext::tidy(tweet_12top, matrix="gamma")
View(tweet_12docs)
tweet_12docs <- tidytext::tidy(tweet_12top, matrix="gamma") %>% arrange(topic)
View(tweet_12top)
View(tweet_12docs)
View(tweet_12docs)
tweet_12docs <- tidytext::tidy(tweet_12top, matrix="gamma") %>% pivot_wider(id_cols = document, names_from = topic, values_from = gamma)
View(tweet_12docs)
View(theta12)
tweet_12docs <- tidytext::tidy(tweet_12top, matrix="gamma") #note, this gets you the same as posterior(LDA_obj) -> topics
View(tweet_12docs)
tweet_12docs %>% group_by(document) %>% summarise(topic_prevalnce = mean(gamma))
tweet_12docs %>% group_by(topic) %>% summarise(topic_prevalnce = sum(gamma)/nrow())
tweet_12docs %>% group_by(topic) %>% summarise(topic_prevalnce = mean(gamma))
topic_prev <- colSums(theta12)/298181
topic_prev
tweet_15docs <- tidytext::tidy(tweet_15top, matrix="gamma")
setwd(datadir)
save(tweet_10top,tweet_12top,tweet_15top, file="biznesslanch-lda_models-v0")
tweet_15docs %>% group_by(topic) %>% summarise(topic_prevalence = mean(gamma))
Sys.setenv("plotly_username"="tewonder")
Sys.setenv("plotly_api_key"="CCsRCekkcS68eBzCx3Of")
gitdatadir <- "C:/Users/bizne/OneDrive/Blog/Public opinion tracker/Published/Data"
Sys.setenv("plotly_username"="tewonder")
Sys.setenv("plotly_api_key"="CCsRCekkcS68eBzCx3Of")
gitdatadir <- "C:/Users/bizne/OneDrive/Blog/Public opinion tracker/Published/Data"
Sys.setlocale("LC_CTYPE", "russian")
# Load packages ----------------
library(plotly)
library(broom)
library(devtools)
library(lubridate)
library(tidyverse)
# load Data ---------------
# Note: need to read in API key first (in separate script)
source_url("https://raw.githubusercontent.com/biznesslanch/Russian-Public-Opinion-Tracker/master/Scripts/biznesslanch-putin_opinion-get_data-v2.R",
encoding = "UTF-8")
# remove No answer and hard to say from Levada and FOM data
levada_data <- levada_data %>% select(-No.Answer)
fom_data    <- fom_data %>% select(-hard_to_say)
combined_data <- rbind(levada_data, vtsiom_data, fom_data)
combined_data <- combined_data %>% filter(Date >= "2012-05-07")
combined_data <- combined_data %>% mutate(Date = as.POSIXct(Date + 1, tz="GMT+3", origin="1970-01-01")) #add 1 day to Date to get correct dates
combined_data$date_num <- as.numeric(combined_data$Date)*1000
# create shortcuts for plotly plot -------------------------
m <- loess(Approve ~ date_num, span=0.1, data= combined_data)
l <- loess(Disapprove ~ date_num, span=0.1, data= combined_data)
tdy_date_dt <- Sys.Date()
tdy_date <- format(tdy_date_dt, "%m/%d/%Y")
update <- "Last updated:"
update_cap <- paste(update, tdy_date, sep=" ")
axy <- list(title="Approval/Disapproval", hoverformat=".1f")
axx <-  list(title="", type="date",
tickmode="array",
tickvalue = combined_data$Date,
spikemode="across", spikecolor="black", spikethickness=1, spikedash="solid", spikesnap="cursor",
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 mo",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 mo",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "YTD",
step = "year",
stepmode = "todate"),
list(
count = 2,
label = "2 yrs",
step = "year",
stepmode = "backward"),
list(step = "all"))),
rangeslider=list(type="date", visible=TRUE, thickness=0.0))
# plot -------------------------------------------------------------
opinion_plot <- combined_data %>% na.omit() %>% plot_ly(., x= ~date_num, height = "600", width = "1100") %>%
add_markers(y= ~Approve, showlegend=FALSE, color =I("royalblue3"), alpha=0.2,
hoverinfo = "none") %>%
add_markers(y= ~Disapprove, showlegend=FALSE, color =I("red2"), alpha=0.2,
hoverinfo = "none") %>%
add_lines(y= ~fitted(loess(Approve ~ date_num, span=0.1)), showlegend=TRUE,
line= list(color="rgb(58,95,205"),
name="Approval",
hoverinfo="text",
text= ~paste("Date:", format(Date, "%m-%d-%Y"),
"<br>Approval:", round(m$fitted,1))) %>%
add_lines(y= ~fitted(loess(Disapprove ~ date_num, span=0.1)), showlegend=FALSE,
line= list(color="red2"),
name="Disapproval",
hoverinfo="text",
text= ~paste("Date:", format(Date, "%m-%d-%Y"),
"<br>Disapproval:", round(l$fitted,1))) %>%
add_ribbons(data = augment(m),
ymin = ~.fitted - 1.96 * .se.fit,
ymax = ~.fitted + 1.96 * .se.fit,
color= I("royalblue3"), alpha=0.4, showlegend=FALSE, hoverinfo="none",
line=list(color="rgba(46,91,187,0.0)")) %>%
add_ribbons(data = augment(l),
ymin = ~.fitted - 1.96 * .se.fit,
ymax = ~.fitted + 1.96 * .se.fit,
color= I("red2"), alpha=0.4, showlegend=FALSE, hoverinfo="none",
line=list(color="rgba(220,14,14,0.0)")) %>%
add_annotations(xref="paper",yref="paper", xanchor="left",
x=0.65,y=1.075,
text="Putin Approval Rating<br><sup>From May 2012</sup><br>",
showarrow=F, align="left",
font=list(size=26,family="Arial")) %>%
add_annotations(xref="paper",yref="paper", xanchor="left",
x=0.65,y=0.97,
text=update_cap,
showarrow=F, align="left",
font=list(size=12,family="Arial")) %>%
layout(xaxis=axx, autosize=F,
yaxis=axy,
font=list(family="arial"),
hovermode="compare",
hoverlabel=list(font=list(size=16)),
spikedistance=-1,
hoverdistance=-1,
annotations = list(
list(xref = "paper", yref="paper", xanchor="middle", yanchor="middle",
x=0.325, y=1.025, showarrow=F, align="middle",
text = "Key",
font = list(size=12, family="Arial", color="#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 1, showarrow = F, align = "left",
text = "<b>Lower bound</b>",
font = list(size = 10, family = "Arial", color = "#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 1.04, showarrow = F, align = "left",
text = "<b>Higher bound</b>",
font = list(size = 10, family = "Arial", color = "#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.485, y = 1.02, showarrow = F, align = "left",
text = "<b>Estimate</b>",
font = list(size = 10, family = "Arial", color = "#404040"))),
shapes= list(
list(type = "rectangle",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1, y1 = 1.04,
fillcolor = "#d9d9d9",
line = list(width = 0)),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1, y1 = 1,
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1.04, y1 = 1.04,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1.02, y1 = 1.02,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#404040")))) %>%
config(displayModeBar=F)
opinion_plot
# note, this last line will not run w/o the API key
api_create(opinion_plot, filename = "biznesslanch-ru_opinion-tracker-v1.1")
Sys.setlocale("LC_CTYPE", "russian")
# Load packages ----------------
library(plotly)
library(broom)
library(devtools)
library(lubridate)
library(tidyverse)
# load Data ---------------
# Note: need to read in API key first (in separate script)
source_url("https://raw.githubusercontent.com/biznesslanch/Russian-Public-Opinion-Tracker/master/Scripts/biznesslanch-putin_opinion-get_data-v2.R",
encoding = "UTF-8")
# remove No answer and hard to say from Levada and FOM data
levada_data <- levada_data %>% select(-No.Answer)
fom_data    <- fom_data %>% select(-hard_to_say)
combined_data <- rbind(levada_data, vtsiom_data, fom_data)
combined_data <- combined_data %>% filter(Date >= "2012-05-07")
combined_data <- combined_data %>% mutate(Date = as.POSIXct(Date + 1, tz="GMT+3", origin="1970-01-01")) #add 1 day to Date to get correct dates
combined_data$date_num <- as.numeric(combined_data$Date)*1000
View(levada_check)
Sys.setenv("plotly_username"="tewonder")
Sys.setenv("plotly_api_key"="CCsRCekkcS68eBzCx3Of")
gitdatadir <- "C:/Users/bizne/OneDrive/Blog/Public opinion tracker/Published/Data"
Sys.setlocale("LC_CTYPE", "russian")
# Load packages ----------------
library(plotly)
library(broom)
library(devtools)
library(lubridate)
library(tidyverse)
# load Data ---------------
# Note: need to read in API key first (in separate script)
source_url("https://raw.githubusercontent.com/biznesslanch/Russian-Public-Opinion-Tracker/master/Scripts/biznesslanch-putin_opinion-get_data-v2.R",
encoding = "UTF-8")
# remove No answer and hard to say from Levada and FOM data
levada_data <- levada_data %>% select(-No.Answer)
fom_data    <- fom_data %>% select(-hard_to_say)
combined_data <- rbind(levada_data, vtsiom_data, fom_data)
combined_data <- combined_data %>% filter(Date >= "2012-05-07")
combined_data <- combined_data %>% mutate(Date = as.POSIXct(Date + 1, tz="GMT+3", origin="1970-01-01")) #add 1 day to Date to get correct dates
combined_data$date_num <- as.numeric(combined_data$Date)*1000
Sys.setenv("plotly_username"="tewonder")
Sys.setenv("plotly_api_key"="CCsRCekkcS68eBzCx3Of")
gitdatadir <- "C:/Users/bizne/OneDrive/Blog/Public opinion tracker/Published/Data"
Sys.setlocale("LC_CTYPE", "russian")
# Load packages ----------------
library(plotly)
library(broom)
library(devtools)
library(lubridate)
library(tidyverse)
# load Data ---------------
# Note: need to read in API key first (in separate script)
source_url("https://raw.githubusercontent.com/biznesslanch/Russian-Public-Opinion-Tracker/master/Scripts/biznesslanch-putin_opinion-get_data-v2.R",
encoding = "UTF-8")
# remove No answer and hard to say from Levada and FOM data
levada_data <- levada_data %>% select(-No.Answer)
fom_data    <- fom_data %>% select(-hard_to_say)
combined_data <- rbind(levada_data, vtsiom_data, fom_data)
combined_data <- combined_data %>% filter(Date >= "2012-05-07")
combined_data <- combined_data %>% mutate(Date = as.POSIXct(Date + 1, tz="GMT+3", origin="1970-01-01")) #add 1 day to Date to get correct dates
combined_data$date_num <- as.numeric(combined_data$Date)*1000
Sys.setenv("plotly_username"="tewonder")
Sys.setenv("plotly_api_key"="CCsRCekkcS68eBzCx3Of")
gitdatadir <- "C:/Users/bizne/OneDrive/Blog/Public opinion tracker/Published/Data"
library(plotly)
library(broom)
library(devtools)
library(lubridate)
library(tidyverse)
# load Data ---------------
# Note: need to read in API key first (in separate script)
source_url("https://raw.githubusercontent.com/biznesslanch/Russian-Public-Opinion-Tracker/master/Scripts/biznesslanch-putin_opinion-get_data-v2.R",
encoding = "UTF-8")
# remove No answer and hard to say from Levada and FOM data
levada_data <- levada_data %>% select(-No.Answer)
fom_data    <- fom_data %>% select(-hard_to_say)
combined_data <- rbind(levada_data, vtsiom_data, fom_data)
combined_data <- combined_data %>% filter(Date >= "2012-05-07")
combined_data <- combined_data %>% mutate(Date = as.POSIXct(Date + 1, tz="GMT+3", origin="1970-01-01")) #add 1 day to Date to get correct dates
combined_data$date_num <- as.numeric(combined_data$Date)*1000
# create shortcuts for plotly plot -------------------------
m <- loess(Approve ~ date_num, span=0.1, data= combined_data)
l <- loess(Disapprove ~ date_num, span=0.1, data= combined_data)
tdy_date_dt <- Sys.Date()
tdy_date <- format(tdy_date_dt, "%m/%d/%Y")
update <- "Last updated:"
update_cap <- paste(update, tdy_date, sep=" ")
axy <- list(title="Approval/Disapproval", hoverformat=".1f")
axx <-  list(title="", type="date",
tickmode="array",
tickvalue = combined_data$Date,
spikemode="across", spikecolor="black", spikethickness=1, spikedash="solid", spikesnap="cursor",
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 mo",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 mo",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "YTD",
step = "year",
stepmode = "todate"),
list(
count = 2,
label = "2 yrs",
step = "year",
stepmode = "backward"),
list(step = "all"))),
rangeslider=list(type="date", visible=TRUE, thickness=0.0))
# plot -------------------------------------------------------------
opinion_plot <- combined_data %>% na.omit() %>% plot_ly(., x= ~date_num, height = "600", width = "1100") %>%
add_markers(y= ~Approve, showlegend=FALSE, color =I("royalblue3"), alpha=0.2,
hoverinfo = "none") %>%
add_markers(y= ~Disapprove, showlegend=FALSE, color =I("red2"), alpha=0.2,
hoverinfo = "none") %>%
add_lines(y= ~fitted(loess(Approve ~ date_num, span=0.1)), showlegend=TRUE,
line= list(color="rgb(58,95,205"),
name="Approval",
hoverinfo="text",
text= ~paste("Date:", format(Date, "%m-%d-%Y"),
"<br>Approval:", round(m$fitted,1))) %>%
add_lines(y= ~fitted(loess(Disapprove ~ date_num, span=0.1)), showlegend=FALSE,
line= list(color="red2"),
name="Disapproval",
hoverinfo="text",
text= ~paste("Date:", format(Date, "%m-%d-%Y"),
"<br>Disapproval:", round(l$fitted,1))) %>%
add_ribbons(data = augment(m),
ymin = ~.fitted - 1.96 * .se.fit,
ymax = ~.fitted + 1.96 * .se.fit,
color= I("royalblue3"), alpha=0.4, showlegend=FALSE, hoverinfo="none",
line=list(color="rgba(46,91,187,0.0)")) %>%
add_ribbons(data = augment(l),
ymin = ~.fitted - 1.96 * .se.fit,
ymax = ~.fitted + 1.96 * .se.fit,
color= I("red2"), alpha=0.4, showlegend=FALSE, hoverinfo="none",
line=list(color="rgba(220,14,14,0.0)")) %>%
add_annotations(xref="paper",yref="paper", xanchor="left",
x=0.65,y=1.075,
text="Putin Approval Rating<br><sup>From May 2012</sup><br>",
showarrow=F, align="left",
font=list(size=26,family="Arial")) %>%
add_annotations(xref="paper",yref="paper", xanchor="left",
x=0.65,y=0.97,
text=update_cap,
showarrow=F, align="left",
font=list(size=12,family="Arial")) %>%
layout(xaxis=axx, autosize=F,
yaxis=axy,
font=list(family="arial"),
hovermode="compare",
hoverlabel=list(font=list(size=16)),
spikedistance=-1,
hoverdistance=-1,
annotations = list(
list(xref = "paper", yref="paper", xanchor="middle", yanchor="middle",
x=0.325, y=1.025, showarrow=F, align="middle",
text = "Key",
font = list(size=12, family="Arial", color="#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 1, showarrow = F, align = "left",
text = "<b>Lower bound</b>",
font = list(size = 10, family = "Arial", color = "#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 1.04, showarrow = F, align = "left",
text = "<b>Higher bound</b>",
font = list(size = 10, family = "Arial", color = "#404040")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.485, y = 1.02, showarrow = F, align = "left",
text = "<b>Estimate</b>",
font = list(size = 10, family = "Arial", color = "#404040"))),
shapes= list(
list(type = "rectangle",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1, y1 = 1.04,
fillcolor = "#d9d9d9",
line = list(width = 0)),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1, y1 = 1,
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1.04, y1 = 1.04,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 1.02, y1 = 1.02,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#404040")))) %>%
config(displayModeBar=F)
opinion_plot
# note, this last line will not run w/o the API key
api_create(opinion_plot, filename = "biznesslanch-ru_opinion-tracker-v1.1")
